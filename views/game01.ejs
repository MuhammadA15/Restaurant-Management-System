<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Breakout</title>
    <style>
    	* { padding: 0; margin: 0; }
    	canvas { background: #eee; display: block; margin: 0 auto; }
    </style>
    <link rel="stylesheet"
          href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
          integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
          crossorigin="anonymous">
</head>
<body>

<canvas id="myCanvas" width="750" height="480"></canvas>

<script>
	var canvas = document.getElementById("myCanvas");//Canvas and context variables
	var ctx = canvas.getContext("2d");

	var x = canvas.width/2;//Ball variables
	var y = canvas.height-30;
	var dx = 2;
	var dy = -2;
	var ballRadius = 10;
	var paddleHeight = 10;//Paddle variables
	var paddleWidth = 75;
	var paddleX = (canvas.width-paddleWidth)/2;
	var paddleY = canvas.height-20;
	var rightPressed = false;//Keyboard variables
	var leftPressed = false;
	var brickRowCount = 6;//Brick variables
	var brickColumnCount = 10;
	var brickWidth = 75;
	var brickHeight = 20;
	var brickOffsetTop = 60;
	var brickCount = brickColumnCount*brickRowCount;
	var score = 0;//Game variables
	var lives = 3;
	var gameLevel = 1;

	var bricks = [];//Creating brick matrix
	for(var c=0; c<brickColumnCount; c++) {
		bricks[c] = [];
		for(var r=0; r<brickRowCount; r++) {
			bricks[c][r] = { x: 0, y: 0, status: 1 };
		}
	}

	document.addEventListener("keydown", keyDownHandler, false);//Keyboard and mouse listeners
	document.addEventListener("keyup", keyUpHandler, false);
	document.addEventListener("mousemove", mouseMoveHandler, false);

	function mouseMoveHandler(e) {//Mouse handler
		var relativeX = e.clientX - canvas.offsetLeft;
		if(relativeX > paddleWidth/2 && relativeX < canvas.width - paddleWidth/2) {
			paddleX = relativeX - paddleWidth/2;
		}
		else if(relativeX <= paddleWidth/2){
			paddleX = 0;
		}
		else{
			paddleX = canvas.width - paddleWidth;
		}
	}

	function keyDownHandler(e) {//Keyboard handlers
		if(e.keyCode == 39) {
			rightPressed = true;
		}
		else if(e.keyCode == 37) {
			leftPressed = true;
		}
	}

	function keyUpHandler(e) {
		if(e.keyCode == 39) {
			rightPressed = false;
		}
		else if(e.keyCode == 37) {
			leftPressed = false;
		}
	}

	function nextLevel() {//Sets game to next level
		x = canvas.width/2;
		y = canvas.height-30;
		dx = 2;
		dy = -2;
		score = score + 200 * lives;
		paddleX = (canvas.width-paddleWidth)/2;
		gameLevel++;
		for(var c=0; c<brickColumnCount; c++) {
			for(var r=0; r<brickRowCount; r++) {
				bricks[c][r].status = gameLevel;
			}
		}
		brickCount = brickColumnCount*brickRowCount;
	}

	function collisionDetection() {//Handles ball colliding with bricks and paddle
		for(var c=0; c<brickColumnCount; c++) {
			for(var r=0; r<brickRowCount; r++) {
				var b = bricks[c][r];
				if(b.status > 0) {
					if(x + dx > b.x && x + dx < b.x+brickWidth && y + dy > b.y - ballRadius && y + dy < b.y+brickHeight + ballRadius) {
						dy = -dy;
						b.status--;
						score = score + 100;
						if(b.status == 0){
							brickCount--;
						}
						if(brickCount == 0) {
							nextLevel();
						}
					}
					if(x + dx > b.x - ballRadius && x + dx < b.x+brickWidth + ballRadius && y + dy > b.y && y + dy < b.y+brickHeight) {
						dx = -dx;
						b.status--;
						score = score + 100;
						if(b.status == 0){
							brickCount--;
						}
						if(brickCount == 0) {
							nextLevel();
						}
					}
				}
			}
		}
		if(x + dx > paddleX && x + dx < paddleX + paddleWidth && y + dy > paddleY - ballRadius && dy > 0){
			dy = -dy - .1;
			if(dx > 0) {
				dx = dx + .1;
			}
			else {
				dx = dx - .1;
			}
		}
		else if(x + dx > paddleX - ballRadius && x + dx < paddleX + paddleWidth + ballRadius && y + dy > paddleY - ballRadius && dy > 0){
			dy = -dy - .1;
			if(dx > 0) {
				if(x + dx < paddleX + paddleWidth){
					dx = -dx - .1;
				}
				else {
					dx = dx + .1;
				}
			}
			else {
				if(x + dx > paddleX){
					dx = -dx + .1;
				}
				else {
					dx = dx - .1;
				}
			}
		}
	}

	function drawScore() {//Draws score in upper left
		ctx.font = "16px Arial";
		ctx.fillStyle = "#0095DD";
		ctx.fillText("Score: "+score, 8, 20);
	}

	function drawLives() {//Draws lives in upper right
		ctx.font = "16px Arial";
		ctx.fillStyle = "#0095DD";
		ctx.fillText("Lives: "+lives, canvas.width-65, 20);
	}

	function drawLevel() {//Draws current level in upper center
		ctx.font = "16px Arial";
		ctx.fillStyle = "#0095DD";
		ctx.fillText("Level: "+gameLevel, canvas.width/2-25, 20);
	}

	function drawBall() {//Draws ball
		ctx.beginPath();
		ctx.arc(x, y, ballRadius, 0, Math.PI*2);
		ctx.fillStyle = "#0095DD";
		ctx.fill();
		ctx.closePath();
	}

	function drawBricks() {//Draws bricks
		for(var c=0; c<brickColumnCount; c++) {
			for(var r=0; r<brickRowCount; r++) {
				if(bricks[c][r].status > 0) {
					var brickX = (c*brickWidth);
					var brickY = (r*brickHeight)+brickOffsetTop;
					bricks[c][r].x = brickX;
					bricks[c][r].y = brickY;
					ctx.beginPath();
					ctx.rect(brickX, brickY, brickWidth, brickHeight);
					ctx.strokeStyle = "#000000";
					ctx.stroke();
					ctx.fillStyle = "hsl("+bricks[c][r].status*10+", 100%, 50%)";
					ctx.fill();
					ctx.closePath();
				}
			}
		}
	}

	function drawPaddle() {//Draws paddle
		ctx.beginPath();
		ctx.rect(paddleX, paddleY, paddleWidth, paddleHeight);
		ctx.fillStyle = "#0095DD";
		ctx.fill();
		ctx.closePath();
	}

	function draw() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);//Clear canvas
		drawBricks();//Call individual draw functions
		drawBall();
		drawPaddle();
		drawScore();
		drawLives();
		drawLevel();
		collisionDetection();
		x += dx;//Update ball position
		y += dy;
		if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {//Check for ball collision with edge of canvas
			dx = -dx;
		}
		if(y + dy < ballRadius) {
			dy = -dy;
		} else if(y + dy > canvas.height-ballRadius) {
			lives--;
			if(!lives) {
        // all_highscores = JSON.parse("<%= JSON.stringify(highscores[0]) %>");
        // console.log(all_highscores);
        // highscores = <%= JSON.stringify(highscores[0].game01) %>
        highscores = {
          "game01": {
          "highscore01": {
            "name": "<%= highscores[0].game01.highscore01.name %>",
            "score": parseInt("<%= highscores[0].game01.highscore01.score %>")
          },
          "highscore02": {
            "name": "<%= highscores[0].game01.highscore02.name %>",
            "score": parseInt("<%= highscores[0].game01.highscore02.score %>")
          },
          "highscore03": {
            "name": "<%= highscores[0].game01.highscore03.name %>",
            "score": parseInt("<%= highscores[0].game01.highscore03.score %>")
          }
        }};
        var isNew = false;
				alert("GAME OVER");
          if(score > highscores.game01.highscore01.score) {
  				    var name = prompt("New high score!\nEnter your name.");
              highscores.game01.highscore03.score = highscores.game01.highscore02.score;
              highscores.game01.highscore03.name = highscores.game01.highscore02.name;

              highscores.game01.highscore02.score = highscores.game01.highscore01.score;
              highscores.game01.highscore02.name = highscores.game01.highscore01.name;


  		          highscores.game01.highscore01.score = score;
  				      highscores.game01.highscore01.name = name;
                console.log(`${highscores}`);
                isNew = true;
  				}
          else if (score >  highscores.game01.highscore02.score) {
            var name = prompt("New high score!\nEnter your name.");
            highscores.game01.highscore03.score = highscores.game01.highscore02.score;
            highscores.game01.highscore03.name = highscores.game01.highscore02.name;
            highscores.game01.highscore02.score = score;
            highscores.game01.highscore02.name = name;
            console.log(`${highscores}`);
            isNew = true;

          } else if (score > highscores.game01.highscore03.score) {
            var name = prompt("New high score!\nEnter your name.");
            highscores.game01.highscore03.score = score;
            highscores.game01.highscore03.name = name;
            console.log(`${highscores}`);
            isNew = true;

          }

          if (isNew) {
            highscores._id = "<%= highscores[0]._id %>";
            $.post("/games",
         		highscores,
         		function(data, status){
              console.log(`success write`);
         		});
            document.location.reload();
          }
          else {
            document.location.reload();
          }
			}
			else {
				x = canvas.width/2;
				y = canvas.height-30;
				dx = 2;
				dy = -2;
				paddleX = (canvas.width-paddleWidth)/2;
			}
		}
		if(rightPressed && paddleX < canvas.width-paddleWidth) {//Move paddle with keyboard controls
			paddleX += 7;
		}
		else if(leftPressed && paddleX > 0) {
			paddleX -= 7;
		}
		requestAnimationFrame(draw);
	}


	draw();
</script>

<p> High scores: </p>
<h3><%= highscores[0].game01.highscore01.name %>: <%= highscores[0].game01.highscore01.score %></h3><br>
<h3><%= highscores[0].game01.highscore02.name %>: <%= highscores[0].game01.highscore02.score %></h3><br>
<h3><%= highscores[0].game01.highscore03.name %>: <%= highscores[0].game01.highscore03.score %></h3><br>
<div class="image_block">
    <!-- <% for(var key in highscores[0].game01){ %>
            <b><%= highscores[0].game01[key].name %>: <%= highscores[0].game01[key].score %></b>
            <br/>
    <% } %> -->
</div>
<a href="/table"><button type="button" class="btn btn-info btn-block responsive-width">Home</button></a>


<script
src="https://code.jquery.com/jquery-3.3.1.min.js"
integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
crossorigin="anonymous"></script>
<script src="/js/vendor/notify.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

</body>
</html>
